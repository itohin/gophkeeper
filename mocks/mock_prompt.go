// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/itohin/gophkeeper/internal/adapters/cli/prompt (interfaces: Prompter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	prompt "github.com/itohin/gophkeeper/internal/adapters/cli/prompt"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// PromptGetInput mocks base method.
func (m *MockPrompter) PromptGetInput(arg0 prompt.PromptContent, arg1 func(string) error) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptGetInput", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptGetInput indicates an expected call of PromptGetInput.
func (mr *MockPrompterMockRecorder) PromptGetInput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptGetInput", reflect.TypeOf((*MockPrompter)(nil).PromptGetInput), arg0, arg1)
}

// PromptGetSelect mocks base method.
func (m *MockPrompter) PromptGetSelect(arg0 prompt.PromptContent, arg1 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptGetSelect", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptGetSelect indicates an expected call of PromptGetSelect.
func (mr *MockPrompterMockRecorder) PromptGetSelect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptGetSelect", reflect.TypeOf((*MockPrompter)(nil).PromptGetSelect), arg0, arg1)
}
