// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/itohin/gophkeeper/internal/server/usecases/auth (interfaces: JWTManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockJWTManager is a mock of JWTManager interface.
type MockJWTManager struct {
	ctrl     *gomock.Controller
	recorder *MockJWTManagerMockRecorder
}

// MockJWTManagerMockRecorder is the mock recorder for MockJWTManager.
type MockJWTManagerMockRecorder struct {
	mock *MockJWTManager
}

// NewMockJWTManager creates a new mock instance.
func NewMockJWTManager(ctrl *gomock.Controller) *MockJWTManager {
	mock := &MockJWTManager{ctrl: ctrl}
	mock.recorder = &MockJWTManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTManager) EXPECT() *MockJWTManagerMockRecorder {
	return m.recorder
}

// MakeJWT mocks base method.
func (m *MockJWTManager) MakeJWT(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeJWT", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeJWT indicates an expected call of MakeJWT.
func (mr *MockJWTManagerMockRecorder) MakeJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeJWT", reflect.TypeOf((*MockJWTManager)(nil).MakeJWT), arg0)
}

// MakeRefreshExpiration mocks base method.
func (m *MockJWTManager) MakeRefreshExpiration() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRefreshExpiration")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// MakeRefreshExpiration indicates an expected call of MakeRefreshExpiration.
func (mr *MockJWTManagerMockRecorder) MakeRefreshExpiration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRefreshExpiration", reflect.TypeOf((*MockJWTManager)(nil).MakeRefreshExpiration))
}
